{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Usage","text":""},{"location":"#install","title":"Install","text":"<pre><code>pip install deeplocalizer\n</code></pre> <p>or </p> <pre><code>uv add deeplocalizer\n</code></pre> <p>Import</p> <pre><code>from deeplocalizer import DeepLocalizer # or import other functions in API below\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>For a face localization on Resnet see <code>resnet34_example.ipynb</code>.</p>"},{"location":"#api","title":"API","text":""},{"location":"#core","title":"Core","text":""},{"location":"#deeplocalizer.load_task","title":"load_task","text":"<pre><code>load_task(filename: str) -&gt; tuple[DataFrame, DataFrame]\n</code></pre> Source code in <code>deeplocalizer/deeplocalizer.py</code> <pre><code>def load_task(filename: str) -&gt; tuple[pd.DataFrame, pd.DataFrame]:\n    assert os.path.exists(filename), \"task file must exist\"\n\n    df = pd.read_parquet(filename)\n    task = df[df[\"validation\"] == False]\n    validation = df[df[\"validation\"] == True]\n    return task, validation\n</code></pre>"},{"location":"#deeplocalizer.DeepLocalizer","title":"DeepLocalizer","text":"<pre><code>DeepLocalizer(task: DataFrame, layers_activations: list[Module], model_forward: ModelForwardFunc, save_activations_func: SaveActivationsFunc = default_save_activations, ablate_activations_func: AblateActivationsFunc = default_flat_idxs_ablate, ablate_factor: float = 0.0, batch_size=32)\n</code></pre>"},{"location":"#deeplocalizer.DeepLocalizer.compute_activations","title":"compute_activations","text":"<pre><code>compute_activations()\n</code></pre>"},{"location":"#deeplocalizer.DeepLocalizer.load_activations","title":"load_activations","text":"<pre><code>load_activations(filename, device='cpu')\n</code></pre>"},{"location":"#deeplocalizer.DeepLocalizer.save_activations","title":"save_activations","text":"<pre><code>save_activations(filename: str)\n</code></pre>"},{"location":"#deeplocalizer.DeepLocalizer.top_percent_activations","title":"top_percent_activations","text":"<pre><code>top_percent_activations(top_percent: float, transform=lambda x: abs(x))\n</code></pre>"},{"location":"#deeplocalizer.DeepLocalizer.ablate_model_forward","title":"ablate_model_forward","text":"<pre><code>ablate_model_forward(ablate_activations: list[AblateIdxs], df: DataFrame = None)\n</code></pre>"},{"location":"#types","title":"Types","text":""},{"location":"#deeplocalizer.ModelForwardFunc","title":"ModelForwardFunc  <code>module-attribute</code>","text":"<pre><code>ModelForwardFunc = Callable[[list[Any]], Any]\n</code></pre>"},{"location":"#deeplocalizer.SaveActivationsFunc","title":"SaveActivationsFunc  <code>module-attribute</code>","text":"<pre><code>SaveActivationsFunc = Callable[[Tensor], Tensor]\n</code></pre>"},{"location":"#deeplocalizer.AblateActivationsFunc","title":"AblateActivationsFunc  <code>module-attribute</code>","text":"<pre><code>AblateActivationsFunc = Callable[[Tensor, AblateIdxs, float], Tensor]\n</code></pre>"},{"location":"#deeplocalizer.AblateIdxs","title":"AblateIdxs  <code>module-attribute</code>","text":"<pre><code>AblateIdxs = Tensor | list[int]\n</code></pre>"}]}